//Professor, desculpe, não consegui implementar Deslize, Reflexão e Projeção.
//Por incrível que pareça essa foi a atividade que tive maior dificuldade até agora.
//Acho que foi por que me foquei muito na parte visual, que pensei que seria muito simples,
//e acabar que perdi muito tempo. Quis fazer algo minimamente inspirado. Faltam alguns refinamentos visualmente
//mas espero que compreenda. Saúde!

//Deixei as funções comentadas no draw() para ficar mais fácil de utilizar. Quando a aplicação é iniciada os vetores 
//recebem coordenadas aleatorias.

let va,vb;
let ua,ub;
let svua, svub;

let green, red, blue, yellow;

function setup() {
  createCanvas(400,400);  
  
  green = color(100,200,100);
  yellow = color(200,200,100);
  red = color(200,100,100);
  blue = color(100,100,200);
  
  va = new createVector(int(random(20,100)),int(random(20,100)));
  vb = new createVector(int(random(20,100)),int(random(20,100)));
  ua = new createVector(int(random(120,200)),int(random(20,100)));
  ub = new createVector(int(random(120,200)),int(random(20,100)));
  
}

function draw() {
  background(50);
  strokeWeight(5);  
  breatherMargin();
  
  //somaVetoresExemplo(va,vb,ua,ub);
  //subtraiVetoresExemplo();
  //multiplicacaoPorEscalarExemplo(3);
  //vetorInversoExemplo(va,vb);
}

function drawVec(a,b,color){
  stroke(color);
  line(a.x,a.y,b.x,b.y);  
  fill(color)
  ellipse(b.x,b.y,5,5);
  noStroke();
}

function somaVetoresExemplo(va,vb,ua,ub){
  
  svua = new createVector( va.x + ua.x, va.y + ua.y);
  svub = new createVector( vb.x + ub.x, vb.y + ub.y);
  
  drawVec(va,vb,green);
  drawVec(ua,ub,blue);

  svua.x += 100;
  svub.x += 100;
  
  drawVec(svua,svub,yellow);
  
}

function subtraiVetoresExemplo(){
  
  svua = new createVector( ( va.x - ua.x) + 200, ( va.y - ua.y) + 200);
  svub = new createVector( ( vb.x - ub.x) + 200, ( vb.y - ub.y) + 200);
  
  drawVec(va,vb,green);
  drawVec(ua,ub,blue);
  
  svua.x += 200;
  svub.x += 200;
  
  svua.y -= 100;
  svub.y -= 100;
  
  drawVec(svua,svub,yellow);
}

function multiplicacaoPorEscalarExemplo(n){
  
  drawVec(va,vb,green);
  
  console.log(va.x)
  
  svua = new createVector(va.x * n, va.y * n);
  svub = new createVector(vb.x * n, vb.y * n);
  
  svua.x = va.x + 200;
  svub.x = vb.x + 200;
  
  text(String( n ),160,60)
  
  drawVec(svua,svub,green);
}

function vetorInversoExemplo(va,vb){
  
   drawVec(va,vb,green)
   va.x = va.x * -1 + 350;
   va.y = va.y * -1 + 170;
   vb.x = vb.x * -1 + 350;
   vb.y = vb.y * -1 + 170;
   drawVec(va,vb,green);  
   text(" - 1 ",160,60)

}

function prodEscalar(a,b){
  return a.x * b.x + a.y + b.y;
}

function prodVetorial(a,b){
  return ( ( a.x * b.y)  - ( b.x * a.y) );
}

function breatherMargin(){
  let  bm = 10; // breatherMargin -- margem de respiro
  stroke(20);strokeWeight(3);noFill();
  rect(bm,bm,width-2*bm,height-2*bm);
  
  stroke(220)
  rect(20,20,80,80)
  noStroke();fill(220);
  text('Vetor A', 40, 120);
  
  stroke(220);noFill();
  rect(120,20,80,80)
  noStroke();fill(220);
  text('Vetor B', 140, 120);
  
  stroke(220);noFill();
  rect(220,20,160,160)
  noStroke();fill(220);
  text('Resultante', 270, 200);
  
}